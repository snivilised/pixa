// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -destination ../mocks/mocks-config.go -package mocks -source config.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	configuration "github.com/snivilised/cobrass/src/assistant/configuration"
	clif "github.com/snivilised/cobrass/src/clif"
	proxy "github.com/snivilised/pixa/src/app/proxy"
	gomock "go.uber.org/mock/gomock"
)

// MockProfilesConfig is a mock of ProfilesConfig interface.
type MockProfilesConfig struct {
	ctrl     *gomock.Controller
	recorder *MockProfilesConfigMockRecorder
}

// MockProfilesConfigMockRecorder is the mock recorder for MockProfilesConfig.
type MockProfilesConfigMockRecorder struct {
	mock *MockProfilesConfig
}

// NewMockProfilesConfig creates a new mock instance.
func NewMockProfilesConfig(ctrl *gomock.Controller) *MockProfilesConfig {
	mock := &MockProfilesConfig{ctrl: ctrl}
	mock.recorder = &MockProfilesConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfilesConfig) EXPECT() *MockProfilesConfigMockRecorder {
	return m.recorder
}

// Profile mocks base method.
func (m *MockProfilesConfig) Profile(name string) (clif.ChangedFlagsMap, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", name)
	ret0, _ := ret[0].(clif.ChangedFlagsMap)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Profile indicates an expected call of Profile.
func (mr *MockProfilesConfigMockRecorder) Profile(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockProfilesConfig)(nil).Profile), name)
}

// MockProfilesConfigReader is a mock of ProfilesConfigReader interface.
type MockProfilesConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockProfilesConfigReaderMockRecorder
}

// MockProfilesConfigReaderMockRecorder is the mock recorder for MockProfilesConfigReader.
type MockProfilesConfigReaderMockRecorder struct {
	mock *MockProfilesConfigReader
}

// NewMockProfilesConfigReader creates a new mock instance.
func NewMockProfilesConfigReader(ctrl *gomock.Controller) *MockProfilesConfigReader {
	mock := &MockProfilesConfigReader{ctrl: ctrl}
	mock.recorder = &MockProfilesConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfilesConfigReader) EXPECT() *MockProfilesConfigReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockProfilesConfigReader) Read(arg0 configuration.ViperConfig) (proxy.ProfilesConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(proxy.ProfilesConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockProfilesConfigReaderMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockProfilesConfigReader)(nil).Read), arg0)
}

// MockSchemeConfig is a mock of SchemeConfig interface.
type MockSchemeConfig struct {
	ctrl     *gomock.Controller
	recorder *MockSchemeConfigMockRecorder
}

// MockSchemeConfigMockRecorder is the mock recorder for MockSchemeConfig.
type MockSchemeConfigMockRecorder struct {
	mock *MockSchemeConfig
}

// NewMockSchemeConfig creates a new mock instance.
func NewMockSchemeConfig(ctrl *gomock.Controller) *MockSchemeConfig {
	mock := &MockSchemeConfig{ctrl: ctrl}
	mock.recorder = &MockSchemeConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemeConfig) EXPECT() *MockSchemeConfigMockRecorder {
	return m.recorder
}

// Profiles mocks base method.
func (m *MockSchemeConfig) Profiles() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profiles")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Profiles indicates an expected call of Profiles.
func (mr *MockSchemeConfigMockRecorder) Profiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profiles", reflect.TypeOf((*MockSchemeConfig)(nil).Profiles))
}

// MockSchemesConfig is a mock of SchemesConfig interface.
type MockSchemesConfig struct {
	ctrl     *gomock.Controller
	recorder *MockSchemesConfigMockRecorder
}

// MockSchemesConfigMockRecorder is the mock recorder for MockSchemesConfig.
type MockSchemesConfigMockRecorder struct {
	mock *MockSchemesConfig
}

// NewMockSchemesConfig creates a new mock instance.
func NewMockSchemesConfig(ctrl *gomock.Controller) *MockSchemesConfig {
	mock := &MockSchemesConfig{ctrl: ctrl}
	mock.recorder = &MockSchemesConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemesConfig) EXPECT() *MockSchemesConfigMockRecorder {
	return m.recorder
}

// Scheme mocks base method.
func (m *MockSchemesConfig) Scheme(name string) (proxy.SchemeConfig, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme", name)
	ret0, _ := ret[0].(proxy.SchemeConfig)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Scheme indicates an expected call of Scheme.
func (mr *MockSchemesConfigMockRecorder) Scheme(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockSchemesConfig)(nil).Scheme), name)
}

// Validate mocks base method.
func (m *MockSchemesConfig) Validate(name string, profiles proxy.ProfilesConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", name, profiles)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockSchemesConfigMockRecorder) Validate(name, profiles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSchemesConfig)(nil).Validate), name, profiles)
}

// MockSchemesConfigReader is a mock of SchemesConfigReader interface.
type MockSchemesConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockSchemesConfigReaderMockRecorder
}

// MockSchemesConfigReaderMockRecorder is the mock recorder for MockSchemesConfigReader.
type MockSchemesConfigReaderMockRecorder struct {
	mock *MockSchemesConfigReader
}

// NewMockSchemesConfigReader creates a new mock instance.
func NewMockSchemesConfigReader(ctrl *gomock.Controller) *MockSchemesConfigReader {
	mock := &MockSchemesConfigReader{ctrl: ctrl}
	mock.recorder = &MockSchemesConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemesConfigReader) EXPECT() *MockSchemesConfigReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockSchemesConfigReader) Read(arg0 configuration.ViperConfig) (proxy.SchemesConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(proxy.SchemesConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSchemesConfigReaderMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSchemesConfigReader)(nil).Read), arg0)
}

// MockSamplerConfig is a mock of SamplerConfig interface.
type MockSamplerConfig struct {
	ctrl     *gomock.Controller
	recorder *MockSamplerConfigMockRecorder
}

// MockSamplerConfigMockRecorder is the mock recorder for MockSamplerConfig.
type MockSamplerConfigMockRecorder struct {
	mock *MockSamplerConfig
}

// NewMockSamplerConfig creates a new mock instance.
func NewMockSamplerConfig(ctrl *gomock.Controller) *MockSamplerConfig {
	mock := &MockSamplerConfig{ctrl: ctrl}
	mock.recorder = &MockSamplerConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSamplerConfig) EXPECT() *MockSamplerConfigMockRecorder {
	return m.recorder
}

// NoFiles mocks base method.
func (m *MockSamplerConfig) NoFiles() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoFiles")
	ret0, _ := ret[0].(uint)
	return ret0
}

// NoFiles indicates an expected call of NoFiles.
func (mr *MockSamplerConfigMockRecorder) NoFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoFiles", reflect.TypeOf((*MockSamplerConfig)(nil).NoFiles))
}

// NoFolders mocks base method.
func (m *MockSamplerConfig) NoFolders() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoFolders")
	ret0, _ := ret[0].(uint)
	return ret0
}

// NoFolders indicates an expected call of NoFolders.
func (mr *MockSamplerConfigMockRecorder) NoFolders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoFolders", reflect.TypeOf((*MockSamplerConfig)(nil).NoFolders))
}

// MockSamplerConfigReader is a mock of SamplerConfigReader interface.
type MockSamplerConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockSamplerConfigReaderMockRecorder
}

// MockSamplerConfigReaderMockRecorder is the mock recorder for MockSamplerConfigReader.
type MockSamplerConfigReaderMockRecorder struct {
	mock *MockSamplerConfigReader
}

// NewMockSamplerConfigReader creates a new mock instance.
func NewMockSamplerConfigReader(ctrl *gomock.Controller) *MockSamplerConfigReader {
	mock := &MockSamplerConfigReader{ctrl: ctrl}
	mock.recorder = &MockSamplerConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSamplerConfigReader) EXPECT() *MockSamplerConfigReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockSamplerConfigReader) Read(arg0 configuration.ViperConfig) (proxy.SamplerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(proxy.SamplerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSamplerConfigReaderMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSamplerConfigReader)(nil).Read), arg0)
}

// MockAdvancedConfig is a mock of AdvancedConfig interface.
type MockAdvancedConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAdvancedConfigMockRecorder
}

// MockAdvancedConfigMockRecorder is the mock recorder for MockAdvancedConfig.
type MockAdvancedConfigMockRecorder struct {
	mock *MockAdvancedConfig
}

// NewMockAdvancedConfig creates a new mock instance.
func NewMockAdvancedConfig(ctrl *gomock.Controller) *MockAdvancedConfig {
	mock := &MockAdvancedConfig{ctrl: ctrl}
	mock.recorder = &MockAdvancedConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvancedConfig) EXPECT() *MockAdvancedConfigMockRecorder {
	return m.recorder
}

// AbortOnError mocks base method.
func (m *MockAdvancedConfig) AbortOnError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortOnError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AbortOnError indicates an expected call of AbortOnError.
func (mr *MockAdvancedConfigMockRecorder) AbortOnError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortOnError", reflect.TypeOf((*MockAdvancedConfig)(nil).AbortOnError))
}

// AdhocLabel mocks base method.
func (m *MockAdvancedConfig) AdhocLabel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdhocLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// AdhocLabel indicates an expected call of AdhocLabel.
func (mr *MockAdvancedConfigMockRecorder) AdhocLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdhocLabel", reflect.TypeOf((*MockAdvancedConfig)(nil).AdhocLabel))
}

// JournalLabel mocks base method.
func (m *MockAdvancedConfig) JournalLabel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JournalLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// JournalLabel indicates an expected call of JournalLabel.
func (mr *MockAdvancedConfigMockRecorder) JournalLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JournalLabel", reflect.TypeOf((*MockAdvancedConfig)(nil).JournalLabel))
}

// LegacyLabel mocks base method.
func (m *MockAdvancedConfig) LegacyLabel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegacyLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegacyLabel indicates an expected call of LegacyLabel.
func (mr *MockAdvancedConfigMockRecorder) LegacyLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegacyLabel", reflect.TypeOf((*MockAdvancedConfig)(nil).LegacyLabel))
}

// NoRetries mocks base method.
func (m *MockAdvancedConfig) NoRetries() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoRetries")
	ret0, _ := ret[0].(uint)
	return ret0
}

// NoRetries indicates an expected call of NoRetries.
func (mr *MockAdvancedConfigMockRecorder) NoRetries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoRetries", reflect.TypeOf((*MockAdvancedConfig)(nil).NoRetries))
}

// ProgramTimeout mocks base method.
func (m *MockAdvancedConfig) ProgramTimeout() (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgramTimeout")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProgramTimeout indicates an expected call of ProgramTimeout.
func (mr *MockAdvancedConfigMockRecorder) ProgramTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgramTimeout", reflect.TypeOf((*MockAdvancedConfig)(nil).ProgramTimeout))
}

// TrashLabel mocks base method.
func (m *MockAdvancedConfig) TrashLabel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// TrashLabel indicates an expected call of TrashLabel.
func (mr *MockAdvancedConfigMockRecorder) TrashLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashLabel", reflect.TypeOf((*MockAdvancedConfig)(nil).TrashLabel))
}

// MockAdvancedConfigReader is a mock of AdvancedConfigReader interface.
type MockAdvancedConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockAdvancedConfigReaderMockRecorder
}

// MockAdvancedConfigReaderMockRecorder is the mock recorder for MockAdvancedConfigReader.
type MockAdvancedConfigReaderMockRecorder struct {
	mock *MockAdvancedConfigReader
}

// NewMockAdvancedConfigReader creates a new mock instance.
func NewMockAdvancedConfigReader(ctrl *gomock.Controller) *MockAdvancedConfigReader {
	mock := &MockAdvancedConfigReader{ctrl: ctrl}
	mock.recorder = &MockAdvancedConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvancedConfigReader) EXPECT() *MockAdvancedConfigReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockAdvancedConfigReader) Read(arg0 configuration.ViperConfig) (proxy.AdvancedConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(proxy.AdvancedConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockAdvancedConfigReaderMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockAdvancedConfigReader)(nil).Read), arg0)
}

// MockLoggingConfig is a mock of LoggingConfig interface.
type MockLoggingConfig struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingConfigMockRecorder
}

// MockLoggingConfigMockRecorder is the mock recorder for MockLoggingConfig.
type MockLoggingConfigMockRecorder struct {
	mock *MockLoggingConfig
}

// NewMockLoggingConfig creates a new mock instance.
func NewMockLoggingConfig(ctrl *gomock.Controller) *MockLoggingConfig {
	mock := &MockLoggingConfig{ctrl: ctrl}
	mock.recorder = &MockLoggingConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggingConfig) EXPECT() *MockLoggingConfigMockRecorder {
	return m.recorder
}

// MaxAgeInDays mocks base method.
func (m *MockLoggingConfig) MaxAgeInDays() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxAgeInDays")
	ret0, _ := ret[0].(uint)
	return ret0
}

// MaxAgeInDays indicates an expected call of MaxAgeInDays.
func (mr *MockLoggingConfigMockRecorder) MaxAgeInDays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxAgeInDays", reflect.TypeOf((*MockLoggingConfig)(nil).MaxAgeInDays))
}

// MaxNoOfBackups mocks base method.
func (m *MockLoggingConfig) MaxNoOfBackups() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxNoOfBackups")
	ret0, _ := ret[0].(uint)
	return ret0
}

// MaxNoOfBackups indicates an expected call of MaxNoOfBackups.
func (mr *MockLoggingConfigMockRecorder) MaxNoOfBackups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxNoOfBackups", reflect.TypeOf((*MockLoggingConfig)(nil).MaxNoOfBackups))
}

// MaxSizeInMb mocks base method.
func (m *MockLoggingConfig) MaxSizeInMb() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxSizeInMb")
	ret0, _ := ret[0].(uint)
	return ret0
}

// MaxSizeInMb indicates an expected call of MaxSizeInMb.
func (mr *MockLoggingConfigMockRecorder) MaxSizeInMb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxSizeInMb", reflect.TypeOf((*MockLoggingConfig)(nil).MaxSizeInMb))
}

// Path mocks base method.
func (m *MockLoggingConfig) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockLoggingConfigMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockLoggingConfig)(nil).Path))
}

// MockLoggingConfigReader is a mock of LoggingConfigReader interface.
type MockLoggingConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingConfigReaderMockRecorder
}

// MockLoggingConfigReaderMockRecorder is the mock recorder for MockLoggingConfigReader.
type MockLoggingConfigReaderMockRecorder struct {
	mock *MockLoggingConfigReader
}

// NewMockLoggingConfigReader creates a new mock instance.
func NewMockLoggingConfigReader(ctrl *gomock.Controller) *MockLoggingConfigReader {
	mock := &MockLoggingConfigReader{ctrl: ctrl}
	mock.recorder = &MockLoggingConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggingConfigReader) EXPECT() *MockLoggingConfigReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockLoggingConfigReader) Read(arg0 configuration.ViperConfig) (proxy.LoggingConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(proxy.LoggingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockLoggingConfigReaderMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockLoggingConfigReader)(nil).Read), arg0)
}
